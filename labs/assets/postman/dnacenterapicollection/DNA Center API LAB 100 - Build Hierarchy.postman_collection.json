{
	"info": {
		"_postman_id": "344c2960-353e-447f-93b9-709940013c80",
		"name": "DNA Center API LAB 100 - Build Hierarchy",
		"description": "This collection will set up the dCLOUD environment for the dCLOUD. This collection will set up the following hierarchy as learned from a csv file.\n\nPlease use the csv provided...\n\nGlobal>State\n\nGlobal>State>California>Building10>Floor1\n\nGlobal>State>California>Building10>Floor2\n\nGlobal>State>California>Building10>Floor3\n\nGlobal>State>NorthCarolina>Building3>Floor1\n\nGlobal>State>NorthCarolina>Building3>Floor2\n\nGlobal>State>Texas>Building1>Floor1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13375428"
	},
	"item": [
		{
			"name": "DNAC Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if (jsonData.Token) {\r",
							"    pm.test(\"Token acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    pm.environment.set(\"TOKEN\", jsonData[\"Token\"]); \r",
							"}\r",
							"else {\r",
							"    pm.test(\"Token not acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"Get SiteIDs PreCheck\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{DNACpwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{DNACuser}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/system/api/v1/auth/token",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get SiteIDs PreCheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var s = \"/\";",
							"var p = pm.iterationData.get(\"HierarchyParent\");",
							"var a = pm.iterationData.get(\"HierarchyArea\");",
							"var b = pm.iterationData.get(\"HierarchyBldg\");",
							"var f = pm.iterationData.get(\"HierarchyFloor\");",
							"var FLAG = 0;",
							"setTimeout(function(){}, [5000]);",
							"if (f === \"\"){",
							"    if (a !== \"\"){",
							"        var area = p + s + a;",
							"        for (var i = 0;i<jsonData.response.length;i++) {",
							"            var FLAG = 1;",
							"            if (jsonData.response[i].siteNameHierarchy === area){",
							"                var FLAG = 0;                ",
							"                break;",
							"            }",
							"        }",
							"    }",
							"}",
							"else{",
							"    var area = p + s + a;",
							"    var bldg = p + s + a + s + b;",
							"    var floor = p + s + a + s + b + s + f;",
							"    for (var i = 0;i<jsonData.response.length;i++) {",
							"        var FLAG = 1;",
							"        if (jsonData.response[i].siteNameHierarchy === area){",
							"            var FLAG = 2;",
							"            for (var i = 0;i<jsonData.response.length;i++) {",
							"                if (jsonData.response[i].siteNameHierarchy === bldg){",
							"                    var FLAG = 3;",
							"                    for (var i = 0;i<jsonData.response.length;i++) {",
							"                        if (jsonData.response[i].siteNameHierarchy === floor){",
							"                            var FLAG = 0;",
							"                            break;",
							"                        }",
							"                    }",
							"                    break;",
							"                }",
							"            }",
							"            break;",
							"        }",
							"    }",
							"}",
							"",
							"if (FLAG === 3){",
							"    postman.setNextRequest(\"Create Floor\");",
							"}",
							"else if (FLAG === 2){",
							"    postman.setNextRequest(\"Create Building\");",
							"}",
							"else if (FLAG === 1){",
							"    postman.setNextRequest(\"Create Area\");",
							"}",
							"else{",
							"    postman.setNextRequest(\"null\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Area",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"    if ( !(pm.iterationData.get(\"HierarchyFloor\")) ){\r",
							"        postman.setNextRequest(\"null\");\r",
							"    }\r",
							"    else if ( (pm.iterationData.get(\"HierarchyFloor\")) ){\r",
							"        postman.setNextRequest(\"Create Building\");\r",
							"    }\r",
							"    pm.test(\"Area created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Area not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.iterationData.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.iterationData.get(\"HierarchyArea\");\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"area\",\r\n    \"site\": {\r\n        \"area\": {\r\n            \"name\": \"{{HierarchyArea}}\",\r\n            \"parentName\": \"{{HierarchyParent}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Building",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  pm.test(\"Building created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Building not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"Create Floor\")\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.iterationData.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.iterationData.get(\"HierarchyArea\");\r",
							"let HierarchyBldg = pm.iterationData.get(\"HierarchyBldg\");\r",
							"let HierarchyBldgAddress = pm.iterationData.get(\"HierarchyBldgAddress\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"building\",\r\n    \"site\": {\r\n        \"building\": {\r\n            \"name\": \"{{HierarchyBldg}}\",\r\n            \"address\": \"{{HierarchyBldgAddress}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Floor",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [25000]);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"    pm.test(\"Floor created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"    pm.test(\"Floor not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"null\");\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let HierarchyParent = pm.iterationData.get(\"HierarchyParent\");\r",
							"let HierarchyArea = pm.iterationData.get(\"HierarchyArea\");\r",
							"let HierarchyBldg = pm.iterationData.get(\"HierarchyBldg\");\r",
							"let HierarchyFloor = pm.iterationData.get(\"HierarchyFloor\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\": \"floor\",\r\n    \"site\": {\r\n        \"floor\": {\r\n            \"name\": \"{{HierarchyFloor}}\",\r\n            \"parentName\": \"{{HierarchyParent}}/{{HierarchyArea}}/{{HierarchyBldg}}\",\r\n            \"rfModel\": \"Cubes And Walled Offices\",\r\n            \"width\": \"100\",\r\n            \"length\": \"100\",\r\n            \"height\": \"10\"\r\n        }\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}