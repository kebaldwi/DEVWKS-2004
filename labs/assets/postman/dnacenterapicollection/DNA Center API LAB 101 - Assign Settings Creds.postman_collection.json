{
	"info": {
		"_postman_id": "b6359441-3607-44bd-a7c1-cd39cc28da64",
		"name": "DNA Center API LAB 101 - Assign Settings Creds",
		"description": "This collection will set up the dCLOUD environment for the dCLOUD. This collection will set up the following settings and credentials for the hierarchy.  \n  \nPlease use the csv provided...",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13375428"
	},
	"item": [
		{
			"name": "DNAC Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"pm.environment.unset(\"GlobalSiteId\");\r",
							"pm.environment.unset(\"AreaSiteId\");\r",
							"pm.environment.unset(\"BuildingSiteId\");\r",
							"pm.environment.unset(\"FloorSiteId\");\r",
							"pm.environment.unset(\"TargetSiteId\");\r",
							"pm.environment.unset(\"GeneralTestString\");\r",
							"pm.environment.unset(\"DcloudSnmpRO-Desc\");\r",
							"pm.environment.unset(\"DcloudSnmpRO\");\r",
							"pm.environment.unset(\"DcloudSnmpRW-Desc\");\r",
							"pm.environment.unset(\"DcloudSnmpRW\");\r",
							"pm.environment.unset(\"DcloudUser\");\r",
							"pm.environment.unset(\"DcloudPwd\");\r",
							"\r",
							"if (jsonData.Token) {\r",
							"    pm.test(\"Token acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    pm.environment.set(\"TOKEN\", jsonData[\"Token\"]); \r",
							"}\r",
							"else {\r",
							"    pm.test(\"Token not acquired\",() => {pm.expect(pm.response.text()).to.include(\"Token\");});\r",
							"    postman.setNextRequest(\"null\");\r",
							"}\r",
							"postman.setNextRequest(\"Get SiteIDs\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"strictSSL": false
			},
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "{{DNACpwd}}",
							"type": "string"
						},
						{
							"key": "username",
							"value": "{{DNACuser}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/system/api/v1/auth/token",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"system",
						"api",
						"v1",
						"auth",
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get SiteIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"var s = \"/\";",
							"var p = pm.iterationData.get(\"HierarchyParent\");",
							"var a = pm.iterationData.get(\"HierarchyArea\");",
							"var b = pm.iterationData.get(\"HierarchyBldg\");",
							"var f = pm.iterationData.get(\"HierarchyFloor\");",
							"var parent = p;",
							"var area = p + s + a;",
							"var bldg = p + s + a + s + b;",
							"var floor = p + s + a + s + b + s + f;",
							"if ( p === \"Global\"){",
							"    if ( a !== \"\" ){",
							"        for (var i = 0;i<jsonData.response.length;i++) {",
							"            if (jsonData.response[i].siteNameHierarchy === area) {",
							"                pm.environment.set(\"AreaSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"                pm.environment.set(\"TargetSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"                pm.test(\"Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"HierarchyArea\"));});",
							"                break;",
							"            }",
							"        }",
							"    }",
							"    else{",
							"        for (var i = 0;i<jsonData.response.length;i++) {",
							"            if (jsonData.response[i].siteNameHierarchy === parent) {",
							"                pm.environment.set(\"GlobalSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"                pm.environment.set(\"TargetSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"                pm.test(\"Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"HierarchyParent\"));});",
							"                break;",
							"            }",
							"        }",
							"    }",
							"}",
							"else {",
							"    for (var i = 0;i<jsonData.response.length;i++) {",
							"        if (jsonData.response[i].siteNameHierarchy === floor) {",
							"            pm.environment.set(\"FloorSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"            pm.environment.set(\"TargetSiteId\", jsonData[\"response\"][i][\"id\"]);",
							"            pm.test(\"Site Id acquired\",() => {pm.expect(pm.response.text()).to.include(pm.iterationData.get(\"HierarchyFloor\"));});",
							"            break;",
							"        }",
							"    }",
							"}",
							"setTimeout(function(){}, [25000]);",
							"if (!(pm.iterationData.get(\"aaaEndpointServer\"))){",
							"    postman.setNextRequest(\"Assign Settings\");",
							"} ",
							"else {",
							"    postman.setNextRequest(\"Assign Settings with AAA\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/site",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"site"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign Settings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.iterationData.get(\"dhcpServer\");\r",
							"pm.iterationData.get(\"domainName\");\r",
							"pm.iterationData.get(\"dnsServer1\");\r",
							"pm.iterationData.get(\"dnsServer2\");\r",
							"pm.iterationData.get(\"syslogServer\");\r",
							"pm.iterationData.get(\"syslogBoolean\");\r",
							"pm.iterationData.get(\"snmpServer\");\r",
							"pm.iterationData.get(\"snmpBoolean\");\r",
							"pm.iterationData.get(\"netflowServer\");\r",
							"pm.iterationData.get(\"netflowPort\");\r",
							"pm.iterationData.get(\"netflowBoolean\");\r",
							"pm.iterationData.get(\"ntpServer\");\r",
							"pm.iterationData.get(\"timeZone\");\r",
							"pm.iterationData.get(\"aaaEndpointServer\");\r",
							"pm.iterationData.get(\"aaaEndpointIpAddress\");\r",
							"pm.iterationData.get(\"aaaEndpointProtocol\");\r",
							"pm.iterationData.get(\"aaaEndpointSharedSecret\");\r",
							"pm.iterationData.get(\"bannerMessage\");          \r",
							"pm.iterationData.get(\"bannerBoolean\");      \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"   pm.test(\"Settings assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Settings not assigned\",() => {pm.expect(pm.response.code).to.eql(200);});\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"postman.setNextRequest(\"Create Credentials\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"dhcpServer\": [\r\n            \"{{dhcpServer}}\"\r\n        ],\r\n        \"dnsServer\": {\r\n            \"domainName\": \"{{domainName}}\",\r\n            \"primaryIpAddress\": \"{{dnsServer1}}\"\r\n        },\r\n           \"syslogServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{syslogServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{syslogBoolean}}\r\n        },\r\n        \"snmpServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{snmpServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{snmpBoolean}}\r\n        },\r\n        \"netflowcollector\": {\r\n            \"ipAddress\": \"{{netflowServer}}\",\r\n            \"port\": {{netflowPort}},\r\n            \"configureDnacIP\": {{netflowBoolean}}\r\n        },\r\n        \"ntpServer\": [\r\n            \"{{ntpServer}}\"\r\n        ],\r\n        \"timezone\": \"{{timeZone}}\",\r\n        \"messageOfTheday\": {\r\n            \"bannerMessage\": \"{{bannerMessage}}\",\r\n            \"retainExistingBanner\": \"{{bannerBoolean}}\"\r\n\t\t}\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/network/{{TargetSiteId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"network",
						"{{TargetSiteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign Settings with AAA",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.iterationData.get(\"dhcpServer\");\r",
							"pm.iterationData.get(\"domainName\");\r",
							"pm.iterationData.get(\"dnsServer1\");\r",
							"pm.iterationData.get(\"dnsServer2\");\r",
							"pm.iterationData.get(\"syslogServer\");\r",
							"pm.iterationData.get(\"syslogBoolean\");\r",
							"pm.iterationData.get(\"snmpServer\");\r",
							"pm.iterationData.get(\"snmpBoolean\");\r",
							"pm.iterationData.get(\"netflowServer\");\r",
							"pm.iterationData.get(\"netflowPort\");\r",
							"pm.iterationData.get(\"netflowBoolean\");\r",
							"pm.iterationData.get(\"ntpServer\");\r",
							"pm.iterationData.get(\"timeZone\");\r",
							"pm.iterationData.get(\"aaaEndpointServer\");\r",
							"pm.iterationData.get(\"aaaEndpointIpAddress\");\r",
							"pm.iterationData.get(\"aaaEndpointProtocol\");\r",
							"pm.iterationData.get(\"aaaEndpointSharedSecret\");\r",
							"pm.iterationData.get(\"bannerMessage\");          \r",
							"pm.iterationData.get(\"bannerBoolean\");      \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"   pm.test(\"Settings assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"   pm.test(\"Settings not assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"setTimeout(function(){}, [15000]);\r",
							"postman.setNextRequest(\"Create Credentials\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"dhcpServer\": [\r\n            \"{{dhcpServer}}\"\r\n        ],\r\n        \"dnsServer\": {\r\n            \"domainName\": \"{{domainName}}\",\r\n            \"primaryIpAddress\": \"{{dnsServer1}}\"\r\n        },\r\n           \"syslogServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{syslogServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{syslogBoolean}}\r\n        },\r\n        \"snmpServer\": {\r\n            \"ipAddresses\": [\r\n                \"{{snmpServer}}\"\r\n            ],\r\n            \"configureDnacIP\": {{snmpBoolean}}\r\n        },\r\n        \"netflowcollector\": {\r\n            \"ipAddress\": \"{{netflowServer}}\",\r\n            \"port\": {{netflowPort}},\r\n            \"configureDnacIP\": {{netflowBoolean}}\r\n        },\r\n        \"ntpServer\": [\r\n            \"{{ntpServer}}\"\r\n        ],\r\n        \"timezone\": \"{{timeZone}}\",\r\n        \"messageOfTheday\": {\r\n            \"bannerMessage\": \"{{bannerMessage}}\",\r\n            \"retainExistingBanner\": \"{{bannerBoolean}}\"\r\n\t\t},\r\n\t\t\"clientAndEndpoint_aaa\": {\r\n\t\t    \"servers\": \"{{aaaEndpointServer}}\",\r\n\t\t    \"ipAddress\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"network\": \"{{aaaEndpointIpAddress}}\",\r\n\t\t    \"protocol\": \"{{aaaEndpointProtocol}}\",\r\n            \"sharedSecret\": \"{{aaaEndpointSharedSecret}}\"\r\n\t\t}    \r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/network/{{TargetSiteId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"network",
						"{{TargetSiteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {\r",
							"  pm.test(\"Credentials created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"}\r",
							"else {\r",
							"  pm.test(\"Credentials not created\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});\r",
							"  postman.setNextRequest(\"null\");\r",
							"}\r",
							"setTimeout(function(){}, [25000]);\r",
							"postman.setNextRequest(\"Get CredentialIDs\")"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.iterationData.get(\"DcloudUser\");\r",
							"pm.iterationData.get(\"DcloudPwd\");\r",
							"pm.iterationData.get(\"DcloudSnmpRO\");\r",
							"pm.iterationData.get(\"DcloudSnmpRO-Desc\");\r",
							"pm.iterationData.get(\"DcloudSnmpRW\");\r",
							"pm.iterationData.get(\"DcloudSnmpRW-Desc\");\r",
							"pm.iterationData.get(\"DcloudNetconf\");\r",
							"pm.environment.unset(\"GeneralTestString\");\r",
							"\r",
							"if (pm.iterationData.get(\"HierarchyParent\") === \"Global\"){\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRO\")){\r",
							"        pm.environment.set(\"GlobalDcloudSnmpRO-Desc\", (pm.iterationData.get(\"DcloudSnmpRO-Desc\")));\r",
							"        pm.environment.set(\"GlobalDcloudSnmpRO\", (pm.iterationData.get(\"DcloudSnmpRO\")));\r",
							"        pm.environment.unset(\"GeneralTestString\");\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRW\")){\r",
							"        pm.environment.set(\"GlobalDcloudSnmpRW-Desc\", (pm.iterationData.get(\"DcloudSnmpRW-Desc\")));\r",
							"        pm.environment.set(\"GlobalDcloudSnmpRW\", (pm.iterationData.get(\"DcloudSnmpRW\")));\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudUser\")){\r",
							"        pm.environment.set(\"GlobalDcloudUser\", (pm.iterationData.get(\"DcloudUser\")));\r",
							"        pm.environment.set(\"GlobalDcloudPwd\", (pm.iterationData.get(\"DcloudPwd\")));\r",
							"    }\r",
							"}\r",
							"\r",
							"if (!pm.iterationData.get(\"DcloudUser\")){\r",
							"    pm.environment.get(\"GlobalDcloudUser\");\r",
							"    pm.environment.get(\"GlobalDcloudPwd\");\r",
							"}\r",
							"if (!pm.iterationData.get(\"DcloudSnmpRO\")){\r",
							"    pm.environment.get(\"GlobalDcloudSnmpRO\");\r",
							"    pm.environment.get(\"GlobalDcloudSnmpRO-Desc\");\r",
							"}\r",
							"if (!pm.iterationData.get(\"DcloudSnmpRW\")){\r",
							"    pm.environment.get(\"GlobalDcloudSnmpRW\");\r",
							"    pm.environment.get(\"GlobalDcloudSnmpRW-Desc\");\r",
							"}\r",
							"if (!pm.iterationData.get(\"DcloudNetconf\")){\r",
							"    pm.environment.get(\"GlobalDcloudNetconf\");\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"settings\": {\r\n        \"cliCredential\": [\r\n            {\r\n                \"description\": \"{{DcloudUser}}\",\r\n                \"username\": \"{{DcloudUser}}\",\r\n                \"password\": \"{{DcloudPwd}}\",\r\n                \"enablePassword\": \"{{DcloudPwd}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cRead\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRO-Desc}}\",\r\n                \"readCommunity\": \"{{DcloudSnmpRO}}\"\r\n            }\r\n        ],\r\n        \"snmpV2cWrite\": [\r\n            {\r\n                \"description\": \"{{DcloudSnmpRW-Desc}}\",\r\n                \"writeCommunity\": \"{{DcloudSnmpRW}}\"\r\n            }\r\n        ]\r\n    }\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CredentialIDs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"setTimeout(function(){}, [15000]);\r",
							"if (pm.iterationData.get(\"HierarchyParent\") === \"Global\"){\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRO-Desc\")){\r",
							"        for (var i = 0;i<jsonData.snmp_v2_read.length;i++){\r",
							"            if (jsonData.snmp_v2_read[i].description === pm.iterationData.get(\"DcloudSnmpRO-Desc\")){\r",
							"                pm.environment.set(\"GlobalCredentialSnmpRO\", jsonData[\"snmp_v2_read\"][i][\"id\"]);\r",
							"                pm.test(\"SNMP RO credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"snmp_v2_read\");});\r",
							"                pm.environment.set(\"SiteCredentialSnmpRO\", jsonData[\"snmp_v2_read\"][i][\"id\"]);\r",
							"            }\r",
							"        }\r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudSnmpRO-Desc\"))){\r",
							"        pm.environment.set(\"SiteCredentialSnmpRO\", pm.environment.get(\"GlobalCredentialSnmpRO\"));\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRW-Desc\")){\r",
							"        for (var i = 0;i<jsonData.snmp_v2_write.length;i++){\r",
							"            if (jsonData.snmp_v2_write[i].description === pm.iterationData.get(\"DcloudSnmpRW-Desc\")){\r",
							"                pm.environment.set(\"GlobalCredentialSnmpRW\", jsonData[\"snmp_v2_write\"][i][\"id\"]);\r",
							"                pm.test(\"SNMP RW credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"snmp_v2_write\");});\r",
							"                pm.environment.set(\"SiteCredentialSnmpRW\", jsonData[\"snmp_v2_write\"][i][\"id\"]);\r",
							"                }\r",
							"        } \r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudSnmpRW-Desc\"))){\r",
							"        pm.environment.set(\"SiteCredentialSnmpRW\", pm.environment.get(\"GlobalCredentialSnmpRW\"));\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudUser\")){\r",
							"        for (var i = 0;i<jsonData.cli.length;i++) {\r",
							"            if (jsonData.cli[i].username === pm.iterationData.get(\"DcloudUser\")) {\r",
							"                pm.environment.set(\"GlobalCredentialCli\", jsonData[\"cli\"][i][\"id\"]);\r",
							"                pm.test(\"CLI credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"cli\");});\r",
							"                pm.environment.set(\"SiteCredentialCli\", jsonData[\"cli\"][i][\"id\"]);\r",
							"                }\r",
							"        } \r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudUser\"))){\r",
							"        pm.environment.set(\"SiteCredentialCli\", pm.environment.get(\"GlobalCredentialCli\"));\r",
							"    }\r",
							"}\r",
							"else {\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRO-Desc\")){\r",
							"        for (var i = 0;i<jsonData.snmp_v2_read.length;i++) {\r",
							"            if (jsonData.snmp_v2_read[i].description === pm.iterationData.get(\"DcloudSnmpRO-Desc\")) {\r",
							"                pm.environment.set(\"SiteCredentialSnmpRO\", jsonData[\"snmp_v2_read\"][i][\"id\"]);\r",
							"                pm.test(\"SNMP RO credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"snmp_v2_read\");});\r",
							"                }\r",
							"        } \r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudSnmpRO-Desc\"))){\r",
							"        pm.environment.set(\"SiteCredentialSnmpRO\", pm.environment.get(\"GlobalCredentialSnmpRO\"));\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudSnmpRW-Desc\")){\r",
							"        for (var i = 0;i<jsonData.snmp_v2_write.length;i++) {\r",
							"            if (jsonData.snmp_v2_write[i].description === pm.iterationData.get(\"DcloudSnmpRW-Desc\")) {\r",
							"                pm.environment.set(\"SiteCredentialSnmpRW\", jsonData[\"snmp_v2_write\"][i][\"id\"]);\r",
							"                pm.test(\"SNMP RW credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"snmp_v2_write\");});\r",
							"                }\r",
							"        } \r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudSnmpRW-Desc\"))){\r",
							"        pm.environment.set(\"SiteCredentialSnmpRW\", pm.environment.get(\"GlobalCredentialSnmpRW\"));\r",
							"    }\r",
							"    if (pm.iterationData.get(\"DcloudUser\")){\r",
							"        for (var i = 0;i<jsonData.cli.length;i++) {\r",
							"            if (jsonData.cli[i].username === pm.iterationData.get(\"DcloudUser\")) {\r",
							"                pm.environment.set(\"SiteCredentialCli\", jsonData[\"cli\"][i][\"id\"]);\r",
							"                pm.test(\"CLI credentials acquired\",() => {pm.expect(pm.response.text()).to.include(\"cli\");});\r",
							"                }\r",
							"        } \r",
							"    }\r",
							"    if (!(pm.iterationData.get(\"DcloudUser\"))){\r",
							"        pm.environment.set(\"SiteCredentialCli\", pm.environment.get(\"GlobalCredentialCli\"));\r",
							"    }\r",
							"}\r",
							"postman.setNextRequest(\"Assign Credentials\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "text"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/device-credential",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"device-credential"
					]
				}
			},
			"response": []
		},
		{
			"name": "Assign Credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);",
							"if ((jsonData.executionId) && (jsonData.message == \"The request has been accepted for execution\")) {",
							"  pm.test(\"Credentials assigned\",() => {pm.expect(pm.response.text()).to.include(\"The request has been accepted for execution\");});",
							"}",
							"else {",
							"  pm.test(\"Global settings not created\",() => {pm.expect(pm.response.code).to.eql(200);});",
							"  postman.setNextRequest(\"null\");",
							"}",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"SiteCredentialCli\");\r",
							"pm.environment.get(\"SiteCredentialSnmpRO\");\r",
							"pm.environment.get(\"SiteCredentialSnmpRW\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "default"
					},
					{
						"key": "X-Auth-Token",
						"value": "{{TOKEN}}",
						"type": "default"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"cliId\": \"{{SiteCredentialCli}}\",\r\n    \"snmpV2ReadId\": \"{{SiteCredentialSnmpRO}}\",\r\n    \"snmpV2WriteId\": \"{{SiteCredentialSnmpRW}}\"\r\n}"
				},
				"url": {
					"raw": "https://{{DNACip}}/dna/intent/api/v1/credential-to-site/{{TargetSiteId}}",
					"protocol": "https",
					"host": [
						"{{DNACip}}"
					],
					"path": [
						"dna",
						"intent",
						"api",
						"v1",
						"credential-to-site",
						"{{TargetSiteId}}"
					]
				}
			},
			"response": []
		}
	]
}